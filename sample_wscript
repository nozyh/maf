import maf

def options(opt):
    opt.load('maf')

def configure(conf):
    conf.load('maf')

LIBLINEAR_METHODS = {
    0: 'L2R Logistic Regression (primal)',
    1: 'L2 SVM (dual)',
    2: 'L2 SVM (primal)',
    3: 'SVM (dual)',
    4: 'Multiclass SVM',
    5: 'L1R L2-loss SVM',
    6: 'L1R Logistic Regression',
    7: 'L2R Logistic Regression (dual)'
}

def experiment(exp):
    exp(target='news20.scale.bz2',
        rule='wget http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/news20.scale.bz2 -O ${TGT}')
    exp(source='news20.scale.bz2', target='news20.scale', rule='bunzip2 ${SRC} --keep')

    exp(target='news20.t.scale.bz2',
        rule='wget http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/news20.t.scale.bz2 -O ${TGT}')
    exp(source='news20.t.scale.bz2', target='news20.t.scale', rule='bunzip2 ${SRC} --keep')

    exp(source='news20.scale',
        target='model',
        parameters=maf.product({
            's': [0, 1, 2, 3, 4, 7],
            'C': [0.001, 0.01, 0.1, 1, 10, 100],
            'B': [-1, 1]
        }),
        rule='liblinear-train -s ${s} -c ${C} -B ${B} ${SRC} ${TGT} > /dev/null')

    exp(source='news20.t.scale model',
        target='raw_result',
        rule='liblinear-predict ${SRC} /dev/null > ${TGT}')

    exp(source='raw_result',
        target='result',
        rule=maf.convert_libsvm_accuracy)

    exp(source='result',
        target='max_accuracy',
        for_each=['s', 'C'],
        # aggregate_by=['B'],
        rule=maf.max('accuracy'))

    exp(source='max_accuracy',
        target='figure.png',
        for_each=[],
        rule=maf.plot_line(
            x={'key': 'C', 'scale': 'log'},
            y='accuracy',
            legend={'key': 's', 'labels': LIBLINEAR_METHODS}))
